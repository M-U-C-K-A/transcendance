generator client {
	provider	=	"prisma-client-js"
}

datasource db {
	provider	=	"sqlite"
	url			=	"file:./data/test.sqlite"
}

// --   _   _ _____ ___________
// --  | | | /  ___|  ___| ___ \
// --  | | | \ `--.| |__ | |_/ /
// --  | | | |`--. \  __||    /
// --  | |_| /\__/ / |___| |\ \
// --   \___/\____/\____/\_| \_|

model User {
	id				Int			@id @default(autoincrement())
	username		String		@unique
	alias			String?
	email			String  @unique
	pass			String?
	avatar			String?
	bio				String?
	onlineStatus	Boolean	@default(false)
	elo				Int			@default(1200)
	win				Int			@default(0)
	lose			Int			@default(0)
	tournamentWon	Int			@default(0)
	pointScored		Int			@default(0)
	pointConcede	Int			@default(0)

	matchesAsP1			Match[]				@relation("P1Matches")
	matchesAsP2			Match[]				@relation("P2Matches")
	wonMatches			Match[]				@relation("WonMatches")
	hostedTournaments	Tournament[]		@relation("HostedTournaments")
	tournamentWins		Tournament[]		@relation("TournamentWins")
	matchHistory		MatchHistory[]
	TournamentParticipants	TournamentParticipants[]
	achievements		Achievement?
	friendsAsUser1		Friends[]			@relation("User1Friends")
	friendsAsUser2		Friends[]			@relation("User2Friends")
	User1Block			Block[]				@relation("User1Block")
	User2Block			Block[]				@relation("User2Block")
	senderId			Invitation[]		@relation("senderId")
	recipientId			Invitation[]		@relation("recipientId")
	SentMessages		Message[]			@relation("SentMessages")
	ReceivedMessages	Message[]			@relation("ReceivedMessages")

	@@map("User")
}

model tmpUser {
	id				Int @id @default(autoincrement())
	username		String	@unique
	email			String
	pass			String?

	@@map("tmpUser")
}

model Friends {
	id1	Int
	id2	Int
	status Boolean @default(false)

	user1	User @relation("User1Friends", fields: [id1], references: [id])
	user2	User @relation("User2Friends", fields: [id2], references: [id])

	@@id([id1, id2])
	@@map("Friends")
}

model Block {
	id1	Int
	id2	Int

	user1	User @relation("User1Block", fields: [id1], references: [id])
	user2	User @relation("User2Block", fields: [id2], references: [id])

	@@id([id1, id2])
	@@map("Block")
}

model Achievement {
	id				Int		@id
	beginner		Boolean	@default(false)
	humiliation		Boolean	@default(false)
	shamefullLose	Boolean	@default(false)
	rivality		Boolean	@default(false)
	fairPlay		Boolean	@default(false)
	lastSecond		Boolean	@default(false)
	comeback		Boolean	@default(false)
	longGame		Boolean	@default(false)
	winTournament	Boolean	@default(false)
	friendly		Boolean	@default(false)
	rank1			Boolean	@default(false)
	looser			Boolean	@default(false)
	winner			Boolean	@default(false)
	scorer			Boolean	@default(false)
	emoji			Boolean	@default(false)
	rage			Boolean	@default(false)

	user User @relation(fields: [id], references: [id])

	@@map("Achievement")
}

//   _____ _____ _   _______ _   _   ___  ___  ___ _____ _   _ _____
//  |_   _|  _  | | | | ___ \ \ | | / _ \ |  \/  ||  ___| \ | |_   _|
//    | | | | | | | | | |_/ /  \| |/ /_\ \| .  . || |__ |  \| | | |
//    | | | | | | | | |    /| . ` ||  _  || |\/| ||  __|| . ` | | |
//    | | \ \_/ / |_| | |\ \| |\  || | | || |  | || |___| |\  | | |
//    \_/  \___/ \___/\_| \_\_| \_/\_| |_/\_|  |_/\____/\_| \_/ \_/


model Tournament {
	id					  Int			@id	@default(autoincrement())
	hostId				  Int
	tournamentName		  String
	slot				  Int			@default(4)
	winnerId			  Int?
	tDate				  DateTime		@default(now()) @map("TDate")

	host			User			@relation("HostedTournaments", fields: [hostId], references: [id])
	winner			User?			@relation("TournamentWins", fields: [winnerId], references: [id])
	participants	TournamentParticipants[]

	@@map("Tournament")
}

model TournamentParticipants {
	userId			Int
	tournamentId	Int

	user		User	@relation(fields: [userId], references: [id])
	tournament	Tournament	@relation(fields: [tournamentId], references: [id])

	@@id([userId, tournamentId])
	@@map("TournamentParticipants")
}

//  ___  ___  ___ _____ _____  _   _
//  |  \/  | / _ \_   _/  __ \| | | |
//  | .  . |/ /_\ \| | | /  \/| |_| |
//  | |\/| ||  _  || | | |    |  _  |
//  | |  | || | | || | | \__/\| | | |
//  \_|  |_/\_| |_/\_/  \____/\_| |_/

model Match {
	id			Int			@id	@default(autoincrement())
	name		String
	p1Id		Int
	p2Id		Int?
	p1Elo		Int
	p2Elo		Int?
	winnerId	Int?
	p1Score		Int?		@default(0)
	p2Score		Int?		@default(0)
	p1EloGain	Int?
	p2EloGain	Int?
	mDate		DateTime	@default(now()) @map("MDate")
	matchType   String  	@default("Quickplay") // Remplace MatchType enum

	player1		User		@relation("P1Matches", fields: [p1Id], references: [id])
	player2		User?		@relation("P2Matches", fields: [p2Id], references: [id])
	winner		User?		@relation("WonMatches", fields: [winnerId], references: [id])
	matchHistory MatchHistory[]

	@@map("Match")
}

model MatchHistory {
	userId	Int
	matchId	Int

	user	User		@relation(fields: [userId], references: [id])
	match	Match		@relation(fields: [matchId], references: [id])

	@@id([userId, matchId])
	@@map("MatchHistory")
}

// --   _____  _   _   ___ _____
// --  /  __ \| | | | / _ \_   _|
// --  | /  \/| |_| |/ /_\ \| |
// --  | |    |  _  ||  _  || |
// --  | \__/\| | | || | | || |
// --   \____/\_| |_/\_| |_/\_/

model Invitation {
	id			Int			@id @default(autoincrement())
	senderId	Int
	recipientId	Int
	matchType   String   @default("Quickplay")
	createdAt	DateTime	@default(now())
	expireAt	DateTime

	sender			User		@relation("senderId", fields: [senderId], references: [id])
	recipient		User		@relation("recipientId", fields: [recipientId], references: [id])
}

model Message {
  id          Int      @id @default(autoincrement())
  senderId    Int
  recipientId Int?
  content     String
  sendAt      DateTime @default(now())
  readStatus  Boolean  @default(false)
  isGeneral   Boolean  @default(false)
  messageType String   @default("Message")

  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  recipient   User?    @relation("ReceivedMessages", fields: [recipientId], references: [id])
}
